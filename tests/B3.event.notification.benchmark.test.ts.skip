import { Like } from 'typeorm';
import { DataSource, Between } from 'typeorm';
import { AppDataSource } from '../src/config/db'; 
import { User } from '../src/models/User';
import { Event } from '../src/models/Event';

let dataSource: DataSource;
const NOTIFY_USER_COUNT = 100; // Can be parametrized

const now = new Date();
const msInHour = 60 * 60 * 1000;
const msInDay = msInHour * 24;

beforeAll(async () => {
  dataSource = await AppDataSource.initialize();

  const userRepo = dataSource.getRepository(User);
  const eventRepo = dataSource.getRepository(Event);

  await userRepo.delete({ email: Like('%@calendar.com') });

  // Create users
  const users = Array.from({ length: NOTIFY_USER_COUNT }, (_, i) =>
    userRepo.create({
      name: `User ${i}`,
      email: `user${i}@calendar.com`,
      password: `pass${i}`,
    })
  );
  await userRepo.save(users);

  // Create events at various time ranges for each user
  const eventRanges = {
    single: 0,
    day: msInDay,
    week: msInDay * 7,
    month: msInDay * 30,
  };

  const allEvents: Event[] = [];

  for (const user of users) {
    for (const [key, offset] of Object.entries(eventRanges)) {
      const event = eventRepo.create({
        title: `${key} event for ${user.name}`,
        description: `Notify test - ${key}`,
        start: new Date(now.getTime() + offset),
        end: new Date(now.getTime() + offset + msInHour),
        label: key,
        reminderMinutesBefore: 10,
        recurrence: 'none',
        owner: user,
        invitees: [user.email],
      });
      allEvents.push(event);
    }
  }

  await eventRepo.save(allEvents);
});

afterAll(async () => {
  const userRepo = dataSource.getRepository(User);
  await userRepo.delete({ email: Like('%@calendar.com') }); 
  await dataSource.destroy();
});

describe('Event notification benchmarks', () => {
  const notifyUsersOfEvents = async (events: Event[]) => {
    // Simulate notifying all invitees
    for (const event of events) {
      for (const email of event.invitees) {
        // Simulated notification (e.g., email/push/etc)
        // Replace this with your real notification function
        expect(typeof email).toBe('string');
      }
    }
  };

  it('notifies users of a single event', async () => {
    const eventRepo = dataSource.getRepository(Event);
    const events = await eventRepo.find({ where: { label: 'single' } });
    await notifyUsersOfEvents(events);
  });

  it('notifies users of events today', async () => {
    const eventRepo = dataSource.getRepository(Event);
    const events = await eventRepo.find({
      where: {
        start: Between(
          now,
          new Date(now.getTime() + msInDay)
        ),
      },
    });
    await notifyUsersOfEvents(events);
  });

  it('notifies users of events this week', async () => {
    const eventRepo = dataSource.getRepository(Event);
    const events = await eventRepo.find({
      where: {
        start: Between(
          now,
          new Date(now.getTime() + msInDay * 7)
        ),
      },
    });
    await notifyUsersOfEvents(events);
  });

  it('notifies users of events this month', async () => {
    const eventRepo = dataSource.getRepository(Event);
    const events = await eventRepo.find({
      where: {
        start: Between(
          now,
          new Date(now.getTime() + msInDay * 30)
        ),
      },
    });
    await notifyUsersOfEvents(events);
  });
});
