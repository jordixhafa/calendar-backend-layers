import { DataSource, Between } from 'typeorm';
import { AppDataSource } from '../src/config/db'; 
import { Event } from '../src/models/Event';
import fs from 'fs/promises';
import path from 'path';

let dataSource: DataSource;

const now = new Date();
const msInHour = 3600 * 1000;
const msInDay = msInHour * 24;

beforeAll(async () => {
  dataSource = await AppDataSource.initialize();
});

afterAll(async () => {
  await dataSource.destroy();
});

const exportDir = path.join(__dirname, '..', 'exports');

const ensureExportDir = async () => {
  try {
    await fs.mkdir(exportDir, { recursive: true });
  } catch {}
};

const writeToFile = async (filename: string, data: any) => {
  const filePath = path.join(exportDir, filename);
  await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');
};

const classifyEvents = async (label: string, durationMs: number) => {
  const eventRepo = dataSource.getRepository(Event);
  const to = new Date(now.getTime() + durationMs);

  const events = await eventRepo.find({
    where: {
      start: Between(now, to),
    },
  });

  return events;
};

function logSystemUsage(label: string) {
  const mem = process.memoryUsage();
  const cpu = process.cpuUsage();

  console.log(`[${label}] CPU: user ${cpu.user}µs, system ${cpu.system}µs`);
  console.log(`[${label}] Memory: RSS ${(mem.rss / 1024 / 1024).toFixed(2)}MB`);
}

describe('Event classification & export benchmarks', () => {
  beforeAll(async () => {
    await ensureExportDir();
  });

  const cases: [label: string, durationMs: number][] = [
    ['day', msInDay],
    ['week', msInDay * 7],
    ['month', msInDay * 30],
  ];

  test.each(cases)(
    'classifies and exports events for a %s',
    async (label, durationMs) => {
      const cpuStart = process.cpuUsage();
      console.time(`classify-${label}`);

      const events = await classifyEvents(label, durationMs);
      await writeToFile(`events-${label}.json`, events);

      console.timeEnd(`classify-${label}`);
      logSystemUsage(`classify-${label}`);
    },
    60_000 // timeout
  );
});
